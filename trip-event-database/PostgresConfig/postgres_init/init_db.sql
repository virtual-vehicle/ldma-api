CREATE SCHEMA raw_data
    AUTHORIZATION postgres;


CREATE EXTENSION IF NOT EXISTS timescaledb CASCADE;
CREATE EXTENSION IF NOT EXISTS postgis CASCADE;

---------

CREATE TYPE raw_data.signal_name AS ENUM
    ('gps_latitude_raw', 
     'gps_longitude_raw', 
     'gps_altitude', 
     'acceleration_x_unaligned', 
     'acceleration_y_unaligned', 
     'acceleration_z_unaligned', 
     'rotation_x_unaligned', 
     'rotation_y_unaligned', 
     'rotation_z_unaligned', 
     'fuel_system_status_03', 
     'engine_load_calc_04', 
     'engine_coolant_temp_05', 
     'short_term_fuel_trim_1_06', 
     'long_term_fuel_trim_1_07', 
     'short_term_fuel_trim_2_08', 
     'long_term_fuel_trim_2_09', 
     'fuel_pressure_0a', 
     'intake_manifold_pressure_0b', 
     'engine_speed_0c', 
     'vehicle_speed_0d', 
     'timing_advance_before_tdc_0e', 
     'intake_air_temp_0f', 
     'maf_air_flow_10', 
     'throttle_position_11', 
     'fuel_tank_level_2f', 
     'barometric_pressure_33', 
     'catalyst_temp_1_1_3c', 
     'catalyst_temp_2_1_3d', 
     'catalyst_temp_1_2_3e', 
     'catalyst_temp_2_2_3f', 
     'abs_load_val_43', 
     'throttle_position_relative_45', 
     'ambient_air_temp_46', 
     'throttle_position_absolute_b_47', 
     'throttle_position_absolute_c_48', 
     'throttle_position_absolute_d_49', 
     'throttle_position_absolute_e_4a', 
     'throttle_position_absolute_f_4b', 
     'throttle_actuator_commanded_4c', 
     'acc_pedal_positin_5a', 
     'hybrid_bat_remaining_life_5b', 
     'engine_oil_temp_5c', 
     'injection_timing_5d', 
     'fuel_rate_5e', 
     'rail_pressure_59', 
     'demand_engine_trq_perc_61', 
     'actual_engine_trq_perc_62', 
     'engine_ref_trq_63');

ALTER TYPE raw_data.signal_name
    OWNER TO postgres;
	
---------

CREATE TABLE raw_data.raw_data_t
(
    measured_at timestamp without time zone NOT NULL,
    signal_name raw_data.signal_name NOT NULL,
    signal_value double precision NOT NULL,
    driver_id integer NOT NULL,
    beagle_id integer NOT NULL,
    vehicle_id integer NOT NULL,
    trip_id uuid NOT NULL,
    id bigint GENERATED BY DEFAULT AS IDENTITY,
    PRIMARY KEY (measured_at, id)
)
WITH (
    OIDS = FALSE
);

ALTER TABLE raw_data.raw_data_t
    OWNER to postgres;
	
SELECT create_hypertable('raw_data.raw_data_t', 'measured_at');

CREATE INDEX ON raw_data.raw_data_t (trip_id, measured_at ASC);

---------

CREATE TABLE raw_data.unprocessed_trip_t
(
    trip_id uuid NOT NULL,
    last_update_at timestamp without time zone NOT NULL,
	processing_started_at timestamp without time zone DEFAULT NULL,
    failed_processing_attempts integer NOT NULL DEFAULT 0,
    PRIMARY KEY (trip_id)
)
WITH (
    OIDS = FALSE,
	FILLFACTOR = 10
);

ALTER TABLE raw_data.unprocessed_trip_t
    OWNER to postgres;
	
CREATE INDEX ON raw_data.unprocessed_trip_t (trip_id);

---------

CREATE OR REPLACE FUNCTION raw_data.update_unprocessed_trip_list () RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO raw_data.unprocessed_trip_t
		(trip_id, last_update_at)
	VALUES
		(NEW.trip_id, LOCALTIMESTAMP)
	ON CONFLICT (trip_id) DO UPDATE
		SET last_update_at=LOCALTIMESTAMP
		WHERE raw_data.unprocessed_trip_t.trip_id = NEW.trip_id;
	
	RETURN NULL;
END
$$
LANGUAGE plpgsql;

---------

CREATE TRIGGER update_unprocessed_trips
    AFTER INSERT OR UPDATE 
    ON raw_data.raw_data_t
    FOR EACH ROW
    EXECUTE PROCEDURE raw_data.update_unprocessed_trip_list();


-----------------------------------------------------------------------------------------

CREATE SCHEMA trip_data
    AUTHORIZATION postgres;

---------

CREATE TABLE trip_data.trip_t
(
    trip_id uuid NOT NULL,
    beagle_id integer NOT NULL,
    vehicle_id integer NOT NULL,
    driver_id integer NOT NULL,
	start_position_name text,
	end_position_name text,
	distance double precision,
	duration double precision NOT NULL,
	start_at timestamp without time zone NOT NULL,
    PRIMARY KEY (trip_id)
)
WITH (
    OIDS = FALSE
);

ALTER TABLE trip_data.trip_t
    OWNER to postgres;
	
CREATE INDEX ON trip_data.trip_t (trip_id);
CREATE INDEX ON trip_data.trip_t (driver_id);

---------

CREATE TABLE trip_data.unprocessed_trip_t
(
    trip_id uuid NOT NULL,
    last_update_at timestamp without time zone NOT NULL,
	processing_started_at timestamp without time zone DEFAULT NULL,
    failed_processing_attempts integer NOT NULL DEFAULT 0,
    PRIMARY KEY (trip_id)
)
WITH (
    OIDS = FALSE,
	FILLFACTOR = 10
);

ALTER TABLE trip_data.unprocessed_trip_t
    OWNER to postgres;
	
CREATE INDEX ON trip_data.unprocessed_trip_t (trip_id);

---------

CREATE OR REPLACE FUNCTION trip_data.update_unprocessed_trip_list () RETURNS TRIGGER AS
$$
BEGIN
	INSERT INTO trip_data.unprocessed_trip_t
		(trip_id, last_update_at)
	VALUES
		(NEW.trip_id, LOCALTIMESTAMP)
	ON CONFLICT (trip_id) DO UPDATE
		SET last_update_at=LOCALTIMESTAMP
		WHERE trip_data.unprocessed_trip_t.trip_id = NEW.trip_id;
	
	RETURN NULL;
END
$$
LANGUAGE plpgsql;

---------

CREATE TRIGGER update_unprocessed_trips
    AFTER INSERT OR UPDATE 
    ON trip_data.trip_t
    FOR EACH ROW
    EXECUTE PROCEDURE trip_data.update_unprocessed_trip_list();

	
--------

CREATE TABLE trip_data.measurement_t
(
    measured_at timestamp without time zone NOT NULL,
    trip_id uuid NOT NULL,
    gps_position geography,
	gps_altitude numeric,
	measured_after double precision,
	acceleration_x double precision,
	acceleration_y double precision,
	acceleration_z double precision,
	rotation_x double precision,
	rotation_y double precision,
	rotation_z double precision,
    fuel_system_status_03 double precision,
    engine_load_calc_04 double precision,
    engine_coolant_temp_05 double precision,
    short_term_fuel_trim_1_06 double precision,
	long_term_fuel_trim_1_07 double precision,
	short_term_fuel_trim_2_08 double precision,
	long_term_fuel_trim_2_09 double precision,
    fuel_pressure_0a double precision,
    intake_manifold_pressure_0b double precision,
    engine_speed_0c double precision,
    vehicle_speed_0d double precision,
    timing_advance_before_tdc_0e double precision,
    intake_air_temp_0f double precision,
    maf_air_flow_10 double precision,
    throttle_position_11 double precision,
    fuel_tank_level_2f double precision,
    barometric_pressure_33 double precision,
    catalyst_temp_1_1_3c double precision,
    catalyst_temp_2_1_3d double precision,
    catalyst_temp_1_2_3e double precision,
    catalyst_temp_2_2_3f double precision,
    abs_load_val_43 double precision,
    throttle_position_relative_45 double precision,
    ambient_air_temp_46 double precision,
    throttle_position_absolute_b_47 double precision,
    throttle_position_absolute_c_48 double precision,
    throttle_position_absolute_d_49 double precision,
    throttle_position_absolute_e_4a double precision,
    throttle_position_absolute_f_4b double precision,
    throttle_actuator_commanded_4c double precision,
    acc_pedal_positin_5a double precision,
    hybrid_bat_remaining_life_5b double precision,
    engine_oil_temp_5c double precision,
    injection_timing_5d double precision,
    fuel_rate_5e double precision,
    rail_pressure_59 double precision,
    demand_engine_trq_perc_61 double precision,
    actual_engine_trq_perc_62 double precision,
    engine_ref_trq_63 double precision,
    PRIMARY KEY (measured_at, trip_id),
    CONSTRAINT fk_measurement_trip FOREIGN KEY (trip_id)
        REFERENCES trip_data.trip_t (trip_id) MATCH FULL
        ON UPDATE CASCADE
        ON DELETE RESTRICT
        DEFERRABLE
)
WITH (
    OIDS = FALSE
);

ALTER TABLE trip_data.measurement_t
    OWNER to postgres;

SELECT create_hypertable('trip_data.measurement_t', 'measured_at');

CREATE INDEX ON trip_data.measurement_t (trip_id, measured_at ASC);

---------

CREATE TYPE trip_data.event_type AS ENUM
    ('BRAKE', 'ACCELERATION', 'STANDSTILL', 'POTHOLE');

ALTER TYPE trip_data.event_type
    OWNER TO postgres;
	
---------

CREATE TABLE trip_data.event_t
(
    event_id integer GENERATED BY DEFAULT AS IDENTITY,
    driver_id integer NOT NULL,
    vehicle_id integer NOT NULL,
    event_type trip_data.event_type NOT NULL,
    trip_id uuid NOT NULL,
    start_at timestamp without time zone NOT NULL,
    start_after double precision NOT NULL,
    start_position geography,
    start_altitude numeric,
    end_at timestamp without time zone NOT NULL,
    end_after double precision NOT NULL,
    end_position geography,
    end_altitude numeric,
    marker_position geography,
    duration double precision NOT NULL,
    event_details jsonb,
    PRIMARY KEY (event_id),
    CONSTRAINT fk_event_trip FOREIGN KEY (trip_id)
        REFERENCES trip_data.trip_t (trip_id) MATCH FULL
        ON UPDATE CASCADE
        ON DELETE RESTRICT
        DEFERRABLE,
    CONSTRAINT time_ranges_equal CHECK ( ABS(EXTRACT(EPOCH FROM (end_at - start_at)) - (end_after - start_after)) < 0.001 AND ABS(duration - (end_after - start_after)) < 0.001 )
)
WITH (
    OIDS = FALSE
);

ALTER TABLE trip_data.event_t
    OWNER to postgres;
	
CREATE INDEX ON trip_data.event_t USING GIST(marker_position);
CREATE INDEX ON trip_data.event_t (event_type);
CREATE INDEX ON trip_data.event_t (trip_id);
CREATE INDEX ON trip_data.event_t (start_at, end_at DESC);
